from ipsec_vpn_tc_manager import *
import os, sys
import re

sys.dont_write_bytecode = True

def gen_tc_ts_map(filename):
    f = open(filename, "w")
    f.write(r"""
# This is an autogenerated file. Do NOT modify manually!
# This file is generated by gen_default_vpn_files.py"""[1:])

    f.write("\nimport ts_vpn\n\n")
    f.write("tc_ts_map = {\n")

    # Entries for IPsec test cases
    generator = IpsecVpnTestCaseManager().tc_generator()
    for tc in generator:
        wrapper_name = "tc_ipsec_vpn_case_%d_" %tc["INDEX"]
        for setting in ["IKE_ENCRYPTION", "IKE_AUTHENTICATION", "IKE_DH_GROUP", "IPSEC_ENCRYPTION", "IPSEC_AUTHENTICATION", "PFS", "IPSEC_DH_GROUP"]:
            wrapper_name += "%s_" %tc[setting].replace(" ","").replace("-","").lower()
        f.write("    %d:[ts_vpn.TsVpn,\"%s\",0],\n" %(tc["INDEX"], wrapper_name[:-1]))
    f.write("}")
    f.close()

def gen_ipsec_default_wrapper_class(filename):
    f = open(filename + ".temp", "w")
    f.write(r"""
# This is an autogenerated file. Do NOT modify manually!
# This file is generated by gen_default_vpn_files.py

import unittest
"""[1:])

    f.write("\nclass VpnIpsecDefaultTcWrappers:\n")

    generator = IpsecVpnTestCaseManager().tc_generator()

    # count how many test cases there are in total
    skipped_count = 0
    not_skipped_count = 0

    for tc in generator:
        wrapper_name = "tc_ipsec_vpn_case_%d_" %tc["INDEX"]
        for setting in ["IKE_ENCRYPTION", "IKE_AUTHENTICATION", "IKE_DH_GROUP", "IPSEC_ENCRYPTION", "IPSEC_AUTHENTICATION", "PFS", "IPSEC_DH_GROUP"]:
            wrapper_name += "%s_" %tc[setting].replace(" ","").replace("-","").lower()

        # Put in the appropriate decorator to skip if there's a bug and we know that the test will fail
        do_not_skip, reasons = Combo(tc).do_we_expect_this_combo_to_pass()

#       Don't put a skip, at the beginning of the script, check if it's expected to fail and fail it there so the failures due to known bugs are in the reports
        for string in reasons: 
            f.write("    #@unittest.skip(\"%s\")\n" %string) 

        if do_not_skip:
            not_skipped_count += 1
        else:
            skipped_count += 1

        f.write("    def %s(self):\n" %wrapper_name[:-1])        
        f.write("        self.tc_vpn_default()\n\n")

    f.close()

    # Re-write file to put the counts at the top of the file
    f = open(filename,'w')
    g = open(filename + ".temp", "r")
    f.write((r"""
# Non-bugged Test Cases:   %d
# Bugged Test Cases:       %d
# Total Test Cases:        %d

""" %(not_skipped_count, skipped_count, not_skipped_count + skipped_count))[1:])

    f.write(g.read())

    f.close()
    g.close()

    os.system("del %s" %(filename + ".temp"))

def main():
    print "Generating files:"

    directory = os.environ['AIRLINKAUTOMATION_HOME'] + '\\testsuite\Feature\VPN\\auto_generated\\'

    filename = directory + "vpn_ipsec_default_tc_wrappers.py"
    print filename + "\t",
    gen_ipsec_default_wrapper_class(filename)
    print "<Done>"

    filename = directory + "vpn_default_tc_ts_map.py"
    print filename + "\t\t",
    gen_tc_ts_map(filename)
    print "<Done>"

if __name__ == "__main__":
    main()
